{"version":3,"sources":["components/TodoList/TodoList.tsx","api.js","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["CompletenessTypes","BASE_URL","getUser","userId","fetch","then","response","ok","Error","status","statusText","json","TodoList","state","tasks","filterQuery","completenessQuery","filterQueryChange","event","setState","target","value","completenessQueryChange","randomize","tasksCopy","i","length","randomIndex","Math","floor","random","temp","getFilteredTasks","filteredTasks","filter","task","title","toLowerCase","includes","completed","a","this","props","selectedUserId","chooseAUser","className","type","placeholder","onChange","onClick","defaultValue","disabled","map","classNames","checked","readOnly","id","React","Component","CurrentUser","user","hasRequestError","loadData","selectedUser","prevProps","clear","name","email","phone","App","unselectUser","ReactDOM","render","document","getElementById"],"mappings":"gPAKKA,E,0HCLCC,EAAW,oCAaJC,EAAU,SAACC,GACtB,OAAOC,MAAM,GAAD,OAAIH,EAAJ,kBAAsBE,IAC/BE,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,W,yBDfjBX,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KAiBE,IAAMY,EAAb,4MACEC,MAAQ,CACNC,MAAO,GACPC,YAAa,GACbC,kBAAmB,OAJvB,EAaEC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZJ,YAAaG,EAAME,OAAOC,SAfhC,EAmBEC,wBAA0B,SAACJ,GACzB,EAAKC,SAAS,CACZH,kBAAmBE,EAAME,OAAOC,SArBtC,EA2BEE,UAAY,WAIV,IAHA,IAAQT,EAAU,EAAKD,MAAfC,MACFU,EAAS,YAAOV,GAEbW,EAAID,EAAUE,OAAS,EAAGD,EAAI,EAAGA,GAAK,EAAG,CAChD,IAAME,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,GACzCM,EAAOP,EAAUC,GAEvBD,EAAUC,GAAKD,EAAUG,GACzBH,EAAUG,GAAeI,EAG3B,EAAKZ,SAAS,CAAEL,MAAOU,KAvC3B,EA0CEQ,iBAAmB,WACjB,MAII,EAAKnB,MAHPC,EADF,EACEA,MACAC,EAFF,EAEEA,YACAC,EAHF,EAGEA,kBAGEiB,EAAgBnB,EAAMoB,QAAO,SAACC,GAAD,OAC/BA,EAAKC,OACFD,EAAKC,MAAMC,cACXC,SAASvB,EAAYsB,kBAe1B,OAZAJ,EAAgBA,EAAcC,QAAO,SAACC,GACpC,OAAQnB,GACN,IAAK,SACH,OAA0B,IAAnBmB,EAAKI,UACd,IAAK,YACH,OAA0B,IAAnBJ,EAAKI,UACd,IAAK,MACL,QACE,OAAOJ,OA/DjB,8FAOE,4BAAAK,EAAA,sEC1BOpC,MAAM,GAAD,OAAIH,EAAJ,WACTI,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,UDoBpB,OACQG,EADR,OAGE2B,KAAKtB,SAAS,CAAEL,UAHlB,gDAPF,0EAsEE,WACE,IAAQC,EAAgB0B,KAAK5B,MAArBE,YACR,EAAwC0B,KAAKC,MAArCC,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,YAClBX,EAAgBQ,KAAKT,mBAE3B,OACEC,GACE,sBAAKY,UAAU,WAAf,UACE,wCACA,sBAAKA,UAAU,2BAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,uBACEC,KAAK,OACLC,YAAY,uBACZ1B,MAAON,EACPiC,SAAUP,KAAKxB,kBACf4B,UAAU,qBAGZ,wBACEA,UAAU,+BACVC,KAAK,SACLG,QAASR,KAAKlB,UAHhB,uBAQA,yBACEyB,SAAUP,KAAKnB,wBACf4B,aAAa,GAFf,UAIE,wBACE7B,MAAM,GACN8B,UAAQ,EAFV,oCAMA,wBAAQ9B,MAAM,MAAd,iBAGA,wBAAQA,MAAM,SAAd,oBAGA,wBAAQA,MAAM,YAAd,6BAMJ,oBAAIwB,UAAU,iBAAd,SACGZ,EAAcmB,KAAI,SAACjB,GAAD,OACjB,qBACEU,UAAWQ,IAAW,iBAAkB,CACtC,6BAA8BlB,EAAKI,UACnC,0BAA2BJ,EAAKI,YAHpC,UAOE,kCACE,uBACEO,KAAK,WACLQ,QAASnB,EAAKI,UACdgB,UAAQ,IAEV,4BACGpB,EAAKC,WAIV,yBACES,UAAWQ,IAAW,+BAAgC,CACpD,kCAAmClB,EAAKhC,SAAWwC,IAErDG,KAAK,SACLzB,MAAOc,EAAKhC,OACZ8C,QAASL,EANX,sBASGT,EAAKhC,YAtBHgC,EAAKqB,mBA9H5B,GAA8BC,IAAMC,WERvBC,G,MAAb,4MACE9C,MAAe,CACb+C,KAAM,KACNC,iBAAiB,GAHrB,EAgBEC,SAhBF,sBAgBa,4BAAAtB,EAAA,+EAEYtC,EAAQ,EAAKwC,MAAMqB,cAF/B,OAEDH,EAFC,OAIP,EAAKzC,SAAS,CACZyC,OACAC,iBAAiB,IANZ,gDASP,EAAK1C,SAAS,CACZ0C,iBAAiB,IAVZ,yDAhBb,uDAME,WACEpB,KAAKqB,aAPT,gCAUE,SAAmBE,GACbA,IAAcvB,KAAKC,OACrBD,KAAKqB,aAZX,oBA+BE,WACE,MAAkCrB,KAAK5B,MAA/B+C,EAAR,EAAQA,KAAMC,EAAd,EAAcA,gBACNI,EAAUxB,KAAKC,MAAfuB,MAER,OACEL,GACE,qBAAKf,UAAU,cAAf,SACGgB,EACC,mBAAGhB,UAAU,sBAAb,wCAIA,qCACE,oBAAIA,UAAU,qBAAd,SACE,wDAAyBe,EAAKJ,QAGhC,oBAAIX,UAAU,oBAAd,SACGe,EAAKM,OAER,mBAAGrB,UAAU,qBAAb,SACGe,EAAKO,QAER,mBAAGtB,UAAU,qBAAb,SACGe,EAAKQ,QAGR,wBACEvB,UAAU,4BACVC,KAAK,SACLG,QAASgB,EAHX,4BA1Dd,GAAiCR,IAAMC,YC6CxBW,E,4MAhDbxD,MAAe,CACb8B,eAAgB,G,EAGlBC,YAAc,SAAC1B,GACb,IACQG,EADWH,EAAXE,OACAC,OAEHA,IAAU,EAAKR,MAAM8B,gBACxB,EAAKxB,SAAS,CACZwB,gBAAiBtB,K,EAKvBiD,aAAe,WACb,EAAKnD,SAAS,CAAEwB,eAAgB,K,4CAGlC,WACE,IACEA,EACEF,KAAK5B,MADP8B,eAGF,OACE,sBAAKE,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEF,eAAgBA,EAChBC,YAAaH,KAAKG,gBAItB,qBAAKC,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGF,EACC,cAAC,EAAD,CACEoB,aAAcpB,EACdsB,MAAOxB,KAAK6B,eAEZ,8B,GAzCEb,IAAMC,WCPxBa,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9f8095f0.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { getTasks } from '../../api';\nimport './TodoList.scss';\n\nenum CompletenessTypes {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n\ninterface State {\n  tasks: [] | Todo[];\n  filterQuery: string;\n  completenessQuery: CompletenessTypes;\n}\n\ninterface Props {\n  selectedUserId: number;\n  chooseAUser: (event: React.MouseEvent) => void;\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    tasks: [],\n    filterQuery: '',\n    completenessQuery: 'all' as CompletenessTypes.all,\n  };\n\n  async componentDidMount() {\n    const tasks = await getTasks();\n\n    this.setState({ tasks });\n  }\n\n  filterQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      filterQuery: event.target.value,\n    });\n  };\n\n  completenessQueryChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      completenessQuery: event.target.value as CompletenessTypes.active\n      | CompletenessTypes.completed\n      | CompletenessTypes.all,\n    });\n  };\n\n  randomize = () => {\n    const { tasks } = this.state;\n    const tasksCopy = [...tasks];\n\n    for (let i = tasksCopy.length - 1; i > 0; i -= 1) {\n      const randomIndex = Math.floor(Math.random() * i);\n      const temp = tasksCopy[i];\n\n      tasksCopy[i] = tasksCopy[randomIndex];\n      tasksCopy[randomIndex] = temp;\n    }\n\n    this.setState({ tasks: tasksCopy });\n  };\n\n  getFilteredTasks = () => {\n    const {\n      tasks,\n      filterQuery,\n      completenessQuery,\n    } = this.state;\n\n    let filteredTasks = tasks.filter((task: Todo) => (\n      task.title\n      && task.title.toLowerCase()\n        .includes(filterQuery.toLowerCase())\n    ));\n\n    filteredTasks = filteredTasks.filter((task: Todo) => {\n      switch (completenessQuery) {\n        case 'active' as CompletenessTypes:\n          return task.completed === false;\n        case 'completed' as CompletenessTypes:\n          return task.completed === true;\n        case 'all' as CompletenessTypes.all:\n        default:\n          return task;\n      }\n    });\n\n    return filteredTasks;\n  };\n\n  render() {\n    const { filterQuery } = this.state;\n    const { selectedUserId, chooseAUser } = this.props;\n    const filteredTasks = this.getFilteredTasks();\n\n    return (\n      filteredTasks && (\n        <div className=\"TodoList\">\n          <h2>Todos:</h2>\n          <div className=\"TodoList__list-container\">\n            <div className=\"TodoList__filters\">\n              <input\n                type=\"text\"\n                placeholder=\"Write key words here\"\n                value={filterQuery}\n                onChange={this.filterQueryChange}\n                className=\"TodoList__filter\"\n              />\n\n              <button\n                className=\"TodoList__user-button button\"\n                type=\"button\"\n                onClick={this.randomize}\n              >\n                Randomize\n              </button>\n\n              <select\n                onChange={this.completenessQueryChange}\n                defaultValue=\"\"\n              >\n                <option\n                  value=\"\"\n                  disabled\n                >\n                  Filter by completeness\n                </option>\n                <option value=\"all\">\n                  all\n                </option>\n                <option value=\"active\">\n                  active\n                </option>\n                <option value=\"completed\">\n                  completed\n                </option>\n              </select>\n            </div>\n\n            <ul className=\"TodoList__list\">\n              {filteredTasks.map((task: Todo) => (\n                <li\n                  className={classNames('TodoList__item', {\n                    'TodoList__item--unchecked': !task.completed,\n                    'TodoList__item--checked': task.completed,\n                  })}\n                  key={task.id}\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={task.completed}\n                      readOnly\n                    />\n                    <p>\n                      {task.title}\n                    </p>\n                  </label>\n\n                  <button\n                    className={classNames('TodoList__user-button button', {\n                      'TodoList__user-button--selected': task.userId === selectedUserId,\n                    })}\n                    type=\"button\"\n                    value={task.userId}\n                    onClick={chooseAUser}\n                  >\n                    User&nbsp;#\n                    {task.userId}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      )\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTasks = () => {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getUser = (userId) => {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import React from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  selectedUser: number;\n  clear: () => void;\n}\n\ninterface State {\n  user: null | User;\n  hasRequestError: boolean;\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    hasRequestError: false,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps !== this.props) {\n      this.loadData();\n    }\n  }\n\n  loadData = async () => {\n    try {\n      const user = await getUser(this.props.selectedUser);\n\n      this.setState({\n        user,\n        hasRequestError: false,\n      });\n    } catch (error) {\n      this.setState({\n        hasRequestError: true,\n      });\n    }\n  };\n\n  render() {\n    const { user, hasRequestError } = this.state;\n    const { clear } = this.props;\n\n    return (\n      user && (\n        <div className=\"CurrentUser\">\n          {hasRequestError ? (\n            <p className=\"App__content--error\">\n              Houston, we have a problem\n            </p>\n          ) : (\n            <>\n              <h2 className=\"CurrentUser__title\">\n                <span>{`Selected user: ${user.id}`}</span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">\n                {user.name}\n              </h3>\n              <p className=\"CurrentUser__email\">\n                {user.email}\n              </p>\n              <p className=\"CurrentUser__phone\">\n                {user.phone}\n              </p>\n\n              <button\n                className=\"CurrentUser__clear button\"\n                type=\"button\"\n                onClick={clear}\n              >\n                Clear\n              </button>\n            </>\n          )}\n        </div>\n      )\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  chooseAUser = (event: React.MouseEvent) => {\n    const { target } = event;\n    const { value } = target as HTMLButtonElement;\n\n    if (+value !== this.state.selectedUserId) {\n      this.setState({\n        selectedUserId: +value,\n      });\n    }\n  };\n\n  unselectUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUserId={selectedUserId}\n            chooseAUser={this.chooseAUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUser={selectedUserId}\n                clear={this.unselectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}